services:
  # Service
  tasks_fastapi:
    build:
      context: .
      dockerfile: Dockerfile
      target: fastapi_dev
    ports:
      - 8000:8000
    volumes:
      - ./:/app
    environment:
      - ENVIRONMENT=test
      # DB
      - DB_URL=postgresql+asyncpg://user:password@postgres:5432/tasks
      - READ_REPLICA_DB_URL=postgresql+asyncpg://user:password@postgres:5432/tasks
      # Tracing
      - OTEL_SERVICE_NAME=tasks
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRICS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=otlp
    restart: always
    depends_on:
      - nats
      - postgres
      - redis
      - prometheus
      - otel-collector

  tasks_graphql:
    build:
      context: .
      dockerfile: Dockerfile
      target: graphql_dev
    ports:
      - 8001:8000
    volumes:
      - ./:/app
    environment:
      - ENVIRONMENT=test
      # DB
      - DB_URL=postgresql+asyncpg://user:password@postgres:5432/tasks
      - READ_REPLICA_DB_URL=postgresql+asyncpg://user:password@postgres:5432/tasks
      # Tracing
      - OTEL_SERVICE_NAME=tasks
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRICS_EXPORTER=none
      - OTEL_TRACES_EXPORTER=otlp
    restart: always
    depends_on:
      - nats
      - postgres
      - redis
      - prometheus
      - otel-collector

  # Testing
  integration_tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    volumes:
      - ./:/app
    environment:
      - LOG_LEVEL=ERROR
      - SERVER_URL=http://tasks_fastapi:8000/api
      - ENVIRONMENT=test
      - DB_URL=postgresql+asyncpg://user:password@postgres:5432/tasks
      - READ_REPLICA_DB_URL=postgresql+asyncpg://user:password@postgres:5432/tasks
    depends_on:
      - tasks_fastapi
    profiles:
      - test

  # DB
  postgres:
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=tasks
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=user

  # Cache
  redis:
    image: redis:latest
    restart: always
    ports:
      - 6379:6379
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    ports:
      - 6380:8081
    environment:
      - REDIS_HOSTS=local:redis:6379

  # Broker
  nats:
    image: nats:alpine
    restart: always
    ports:
      - 4222:4222
    command:
      - '--jetstream'

  # Auth
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.4
    restart: always
    ports:
      - 8080:8080
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: ['start-dev', '--import-realm']
    volumes:
      - ./.configs/keycloak/realm.json:/opt/keycloak/data/import/realm.json

  # Observability
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./.configs/prometheus:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - 16686:16686
  otel-collector:
    image: otel/opentelemetry-collector:latest
    restart: always
    volumes:
      - ./.configs/opentelemetry-collector:/etc/otel
    ports:
      - 4317:4317
    command:
      - '--config=/etc/otel/collector.yaml'
    depends_on:
      - jaeger
